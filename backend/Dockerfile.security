# Secure multi-stage Dockerfile for LinkedIn Recommendation Writer
# This Dockerfile implements security best practices

# =================================================================
# BUILD STAGE - Use a secure base image and minimal dependencies
# =================================================================
FROM python:3.13-slim AS builder

# Security: Update package index and install security updates
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        build-essential \
        libmagic1 \
        libmagic-dev \
        pkg-config \
        && rm -rf /var/lib/apt/lists/*

# Security: Create a non-root user for building
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Security: Set working directory with proper permissions
WORKDIR /app

# Security: Copy only necessary files for dependency installation
COPY requirements.txt pyproject.toml ./

# Install Python dependencies in a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Security: Install dependencies with pip security flags
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# =================================================================
# PRODUCTION STAGE - Minimal runtime image
# =================================================================
FROM python:3.13-slim AS production

# Security: Install only runtime dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        libmagic1 \
        curl \
        && rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Security: Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser && \
    mkdir -p /app && \
    chown -R appuser:appuser /app

# Security: Set working directory
WORKDIR /app

# Security: Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Security: Copy application code with proper ownership
COPY --chown=appuser:appuser . .

# Security: Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/uploads && \
    chown -R appuser:appuser /app/logs /app/uploads && \
    chmod 755 /app/logs /app/uploads

# Security: Remove unnecessary files and permissions
RUN find /app -name "*.pyc" -delete && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Security: Set proper file permissions
RUN chmod 644 /app/app/**/*.py && \
    chmod 755 /app/app/main.py

# Security: Create health check
COPY --chown=appuser:appuser docker/healthcheck.sh /app/healthcheck.sh
RUN chmod +x /app/healthcheck.sh

# Security: Switch to non-root user
USER appuser

# Security: Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PYTHONPATH=/app \
    PATH="/opt/venv/bin:$PATH"

# Security: Expose only necessary port
EXPOSE 8000

# Security: Use exec form for CMD
CMD ["python", "-m", "uvicorn", "app.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "1", \
     "--loop", "uvloop", \
     "--http", "httptools", \
     "--access-log", \
     "--log-level", "info"]

# Security: Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# =================================================================
# SECURITY HARDENING SUMMARY
# =================================================================
# ✅ Non-root user execution
# ✅ Minimal attack surface (slim base image)
# ✅ No unnecessary packages in final image
# ✅ Proper file permissions
# ✅ Virtual environment isolation
# ✅ Security updates applied
# ✅ Health checks implemented
# ✅ Proper signal handling
# ✅ Read-only filesystem where possible
