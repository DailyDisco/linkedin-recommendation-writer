# =============================================================================
# Application Environment Configuration
# =============================================================================
# This file serves as an example for your .env file.
# Copy this file to .env and fill in your actual values.
#
# Variables are loaded by Docker Compose and injected into services.
# Backend services also use Pydantic Settings for validation and defaults.
# =============================================================================

# --- Core Application Settings ---
# The current environment of the application (e.g., development, staging, production).
ENVIRONMENT=development

# --- API Configuration ---
# Host and port for the FastAPI backend.
API_HOST=0.0.0.0
API_PORT=8000
# Enable debug mode for the API (verbose logging, auto-reload for development).\
API_DEBUG=true
# Enable auto-reload for the API server (primarily for development).\
API_RELOAD=true
# Number of worker processes for the API server.\
API_WORKERS=1

# --- Database Configuration (PostgreSQL) ---
# Connection URL for the PostgreSQL database.\
# Example for Docker Compose: postgresql+asyncpg://postgres:password@postgres:5432/github_recommender\
# Example for local development: postgresql+asyncpg://postgres:password@localhost:5432/github_recommender\
DATABASE_URL="postgresql+asyncpg://postgres:password@postgres:5432/github_recommender"
# Database connection pool size.\
DATABASE_POOL_SIZE=10
# Database pool max overflow.\
DATABASE_MAX_OVERFLOW=20
# Database pool timeout in seconds.\
DATABASE_POOL_TIMEOUT=30

# PostgreSQL specific credentials for the database service\
POSTGRES_DB=github_recommender
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_PORT=5432

# --- Redis Configuration ---\
# Connection URL for the Redis cache.\
REDIS_URL="redis://redis:6379/0"
# Redis timeout in seconds.\
REDIS_TIMEOUT=5
# Default TTL (Time To Live) for cached items in Redis in seconds.\
REDIS_DEFAULT_TTL=3600
REDIS_PORT=6379

# --- External API Keys ---\
# GitHub API token (e.g., ghp_YOUR_TOKEN). Required for GitHub profile analysis.\
GITHUB_TOKEN=""
# GitHub API rate limit threshold.\
GITHUB_RATE_LIMIT=5000

# Google Gemini API key (e.g., AIza...YOUR_KEY). Required for AI recommendations.\
GEMINI_API_KEY=""
# Gemini model name to use for AI generations.\
GEMINI_MODEL="gemini-2.5-flash-lite"
# Gemini temperature for controlling creativity (0.0-2.0).\
GEMINI_TEMPERATURE=0.7
# Gemini max tokens for response length.\
GEMINI_MAX_TOKENS=2048

# --- Logging Settings ---\
# Minimum logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL).\
LOG_LEVEL=INFO
# Log format string.\
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# --- Initialization Flags ---\
# Whether to initialize the database on application startup.\
INIT_DB=true
# Whether to run database migrations on application startup.\
RUN_MIGRATIONS=false

# --- CORS Configuration ---\
# Comma-separated list of allowed origins for CORS. Important for frontend access.\
# Example: http://localhost:5173,http://127.0.0.1:5173,https://yourdomain.com\
ALLOWED_ORIGINS="http://localhost:5173,http://127.0.0.1:5173"

# --- Security Settings ---\
# Secret key for JWTs and other security operations. MUST be a long, random string (>= 32 chars).\
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"\
SECRET_KEY="your_super_secure_unique_key_here_at_least_32_characters_long"
# Access token expiration time in minutes.\
ACCESS_TOKEN_EXPIRE_MINUTES=30
# JWT algorithm to use (e.g., HS256).\
JWT_ALGORITHM="HS256"

# --- Rate Limiting ---\
# Enable API rate limiting.\
ENABLE_RATE_LIMITING=true
# Number of requests allowed per minute.\
RATE_LIMIT_REQUESTS_PER_MINUTE=60
# Burst size for rate limiting.\
RATE_LIMIT_BURST_SIZE=10

# --- Feature Flags ---\
# Enable metrics collection.\
ENABLE_METRICS=false
# Enable request tracing.\
ENABLE_TRACING=false

# --- Frontend Specific Variables (Vite) ---\
# Base URL for the backend API from the frontend\'s perspective.\
# For Docker Compose, use \'http://backend:8000\'. For local Vite dev, use \'http://localhost:8000\'.\
VITE_API_BASE_URL="http://backend:8000"
# Frontend API request timeout in milliseconds.\
VITE_API_TIMEOUT=30000
# Node environment for the frontend (development, production).\
NODE_ENV=development

# --- Docker User ID/Group ID (for mounted volumes) ---\
# Set to your host user\'s UID/GID to avoid permission issues with mounted volumes.\
# You can find these with \'id -u\' and \'id -g\' in your terminal.\
UID=1000
GID=1000