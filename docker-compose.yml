# Full Stack Docker Compose for LinkedIn Recommendation Writer
# This configuration runs the application in a multi-container development setup.
services:
  # Main application service (runs both frontend and backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development # Use the development stage from the root Dockerfile
    container_name: linkedin-recommender-app
    ports:
      - '5173:5173' # Vite dev server
      - '8000:8000' # Backend API
    environment:
      # API Configuration
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_API_TIMEOUT=${VITE_API_TIMEOUT}
      # Shared Environment
      - NODE_ENV=${NODE_ENV}
      - ENVIRONMENT=${ENVIRONMENT}
      # CORS Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      # Database
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      # Redis
      - REDIS_URL=${REDIS_URL}
      - REDIS_TIMEOUT=${REDIS_TIMEOUT}
      - REDIS_DEFAULT_TTL=${REDIS_DEFAULT_TTL}
      - REDIS_PORT=${REDIS_PORT}
      # API Keys (ensure these are in your .env file)
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      # Security
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      # Mount source code for live-reloading
      - ./frontend:/app/frontend
      - ./backend:/app/backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - linkedin-recommender-network
    # In development, we run two commands: the backend server and frontend dev server
    command: >
      sh -c "cd /app/backend && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload & \
             cd /app/frontend && npm run dev"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: linkedin-recommender-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - linkedin-recommender-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: linkedin-recommender-redis
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    networks:
      - linkedin-recommender-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

# Named volumes for data persistence
volumes:
  postgres_data:
  redis_data:

# Custom network
networks:
  linkedin-recommender-network:
    driver: bridge
