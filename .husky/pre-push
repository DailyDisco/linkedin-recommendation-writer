#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${PURPLE}🚀 Running pre-push safety checks...${NC}"

# Function to run command and return status with better error handling
run_cmd() {
  local cmd="$1"
  local desc="$2"
  local start_time=$(date +%s)

  echo -e "${BLUE}🔄 Running: ${NC}$desc"

  # Set a timeout for long-running commands (20 minutes for push)
  if timeout 1200 bash -c "$cmd" 2>&1; then
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo -e "${GREEN}✅ $desc completed successfully${NC} (${duration}s)"
    return 0
  else
    local exit_code=$?
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    if [ $exit_code -eq 124 ]; then
      echo -e "${RED}❌ $desc timed out after 20 minutes${NC}"
    else
      echo -e "${RED}❌ $desc failed${NC} (${duration}s)"
    fi
    return $exit_code
  fi
}

# Function to cleanup background processes
cleanup() {
  local exit_code=$?

  # Kill any remaining background processes
  if [ ! -z "${pid1:-}" ]; then
    kill "$pid1" 2>/dev/null || true
  fi
  if [ ! -z "${pid2:-}" ]; then
    kill "$pid2" 2>/dev/null || true
  fi

  exit $exit_code
}

# Set trap to cleanup on exit
trap cleanup EXIT INT TERM

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
  echo -e "${RED}❌ Not in a git repository${NC}"
  exit 1
fi

# Get push details for better context
remote_name=$(git remote get-url origin 2>/dev/null || echo "unknown")
branch_name=$(git branch --show-current 2>/dev/null || echo "unknown")

echo -e "${CYAN}📤 Pushing to: ${remote_name}${NC}"
echo -e "${CYAN}🌿 Branch: ${branch_name}${NC}"

start_time=$(date +%s)
failed=0

# Run code formatting checks first (blocking)
echo -e "\n${PURPLE}💅 Checking code formatting...${NC}"

# Check if frontend directory exists
if [ ! -d "frontend" ] || [ ! -f "frontend/package.json" ]; then
  echo -e "${RED}❌ Frontend directory or package.json not found${NC}"
  exit 1
fi

if ! run_cmd "cd frontend && npm run prettier:check" "Prettier formatting check"; then
  echo -e "${YELLOW}💡 To fix formatting issues, run: cd frontend && npm run prettier:fix${NC}"
  exit 1
fi

# Run comprehensive tests in parallel before push
echo -e "\n${PURPLE}🧪 Running comprehensive tests...${NC}"

# Check if backend directory exists
if [ ! -d "backend" ]; then
  echo -e "${RED}❌ Backend directory not found${NC}"
  exit 1
fi

# Run frontend typecheck and tests in background
(run_cmd "cd frontend && npm run typecheck && npm run test:frontend" "Frontend typecheck and test suite") &
pid1=$!

# Run backend tests in background
(run_cmd "npm run test:backend" "Backend test suite") &
pid2=$!

# Wait for both tests to complete
echo -e "\n${CYAN}⏳ Waiting for test results...${NC}"

# Wait for frontend checks
echo -e "${BLUE}📦 Waiting for frontend processes...${NC}"
if ! wait "$pid1"; then
  echo -e "${RED}❌ Frontend checks failed${NC}"
  failed=1
fi

# Wait for backend checks
echo -e "${BLUE}🐍 Waiting for backend processes...${NC}"
if ! wait "$pid2"; then
  echo -e "${RED}❌ Backend checks failed${NC}"
  failed=1
fi

# Calculate total execution time
end_time=$(date +%s)
total_duration=$((end_time - start_time))

# Final status report
echo -e "\n${PURPLE}📊 Pre-push Summary:${NC}"
echo -e "${CYAN}⏱️  Total execution time: ${total_duration}s${NC}"

if [ $failed -eq 1 ]; then
  echo -e "${RED}❌ Pre-push checks failed! Push blocked.${NC}"
  echo -e "${YELLOW}🔧 Please fix the issues above before pushing.${NC}"
  echo -e "${CYAN}💡 You can run checks manually:${NC}"
  echo -e "   ${CYAN}• Frontend: cd frontend && npm run typecheck && npm run test:frontend${NC}"
  echo -e "   ${CYAN}• Backend: npm run test:backend${NC}"
  echo -e "   ${CYAN}• Format: cd frontend && npm run prettier:fix${NC}"
  exit 1
else
  echo -e "${GREEN}✅ All pre-push checks passed! Safe to push.${NC}"
  echo -e "${CYAN}🚀 Your code is ready for deployment.${NC}"
fi
