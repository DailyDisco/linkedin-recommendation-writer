#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to run command and return status
run_cmd() {
  local cmd="$1"
  local desc="$2"

  echo -e "${BLUE}üîÑ Running: ${NC}$desc"
  echo -e "${CYAN}Command: ${NC}$cmd"

  # Use a subshell to ensure directory changes don't affect the main script
  if (eval "$cmd"); then
    echo -e "${GREEN}‚úÖ $desc completed successfully${NC}"
    return 0
  else
    local exit_code=$?
    echo -e "${RED}‚ùå $desc failed${NC}"
    return $exit_code
  fi
}

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
  echo -e "${RED}‚ùå Not in a git repository${NC}"
  exit 1
fi

# Check if there are any staged files
if [ -z "$(git diff --cached --name-only 2>/dev/null)" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  No staged files found. Skipping pre-commit checks.${NC}"
  exit 0
fi

# Detect what types of files changed
HAS_FRONTEND=$(git diff --cached --name-only | grep -E "\.(ts|tsx|js|jsx)$" || echo "")
HAS_BACKEND=$(git diff --cached --name-only | grep -E "\.py$" || echo "")
HAS_CONFIG=$(git diff --cached --name-only | grep -E "\.(json|yml|yaml|toml|md)$" || echo "")

echo -e "${PURPLE}üìã Changed file types detected:${NC}"
[ -n "$HAS_FRONTEND" ] && echo -e "   ${CYAN}Frontend files:${NC} ‚úÖ" || echo -e "   ${CYAN}Frontend files:${NC} ‚ùå"
[ -n "$HAS_BACKEND" ] && echo -e "   ${CYAN}Backend files:${NC} ‚úÖ" || echo -e "   ${CYAN}Backend files:${NC} ‚ùå"
[ -n "$HAS_CONFIG" ] && echo -e "   ${CYAN}Config files:${NC} ‚úÖ" || echo -e "   ${CYAN}Config files:${NC} ‚ùå"

failed=0

# Backend checks (if backend files changed)
if [ -n "$HAS_BACKEND" ]; then
  echo -e "\n${PURPLE}üîß Running backend checks...${NC}"

  # Check if backend directory exists
  if [ ! -d "backend" ]; then
    echo -e "${RED}‚ùå Backend directory not found${NC}"
    exit 1
  fi

  # Run backend formatting check
  if ! (cd backend && python -m black --check --diff app/); then
    echo -e "${RED}‚ùå Python formatting check failed${NC}"
    echo -e "${YELLOW}üí° Run 'cd backend && python -m black app/' to fix formatting${NC}"
    failed=1
  else
    echo -e "${GREEN}‚úÖ Python formatting check completed successfully${NC}"
  fi

  # Run backend linting check
  if ! python -m flake8 --max-line-length=150 --extend-ignore=E203,W503 backend/app/; then
    echo -e "${RED}‚ùå Python linting check failed${NC}"
    echo -e "${YELLOW}üí° Fix the linting issues above${NC}"
    failed=1
  else
    echo -e "${GREEN}‚úÖ Python linting check completed successfully${NC}"
  fi
fi

# Frontend checks (if frontend files changed)
if [ -n "$HAS_FRONTEND" ]; then
  echo -e "\n${PURPLE}üé® Running frontend checks...${NC}"

  # Check if frontend directory and package.json exist
  if [ ! -d "frontend" ] || [ ! -f "frontend/package.json" ]; then
    echo -e "${RED}‚ùå Frontend directory or package.json not found${NC}"
    exit 1
  fi

  # Run frontend formatting fix
  if ! (cd frontend && npm run prettier:fix); then
    echo -e "${YELLOW}üí° Frontend formatting fix failed${NC}"
    failed=1
  else
    echo -e "${GREEN}‚úÖ Frontend formatting fix completed successfully${NC}"
  fi

  # Run frontend linting
  if ! (cd frontend && npm run lint); then
    echo -e "${YELLOW}üí° Fix the linting issues above${NC}"
    failed=1
  else
    echo -e "${GREEN}‚úÖ Frontend linting completed successfully${NC}"
  fi
fi

# Final status report
echo -e "\n${PURPLE}üìä Pre-commit Summary:${NC}"

if [ $failed -eq 1 ]; then
  echo -e "${RED}‚ùå Some checks failed!${NC}"
  echo -e "${YELLOW}üîß Please fix the issues above and try again.${NC}"
  exit 1
else
  echo -e "${GREEN}‚úÖ All checks passed successfully!${NC}"
  echo -e "${CYAN}üéâ Your code is ready for commit.${NC}"
fi
