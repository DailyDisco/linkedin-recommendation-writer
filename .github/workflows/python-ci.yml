name: Python CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  WORKING_DIR: ./backend

jobs:
  # Fast feedback: linting and formatting checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.WORKING_DIR }}/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKING_DIR }}

      - name: Install development tools
        run: pip install black isort flake8 mypy
        working-directory: ${{ env.WORKING_DIR }}

      - name: Check code formatting (black)
        run: |
          echo "üîç Checking Python code formatting..."
          if ! black --check --diff app/; then
            echo "‚ùå Code is not properly formatted with Black"
            echo "Please run: black app/"
            exit 1
          else
            echo "‚úÖ All Python files are properly formatted"
          fi
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

      - name: Check import sorting (isort)
        run: |
          echo "üîç Checking Python import sorting..."
          if ! isort --check-only --diff app/; then
            echo "‚ùå Imports are not properly sorted"
            echo "Please run: isort app/"
            exit 1
          else
            echo "‚úÖ All Python imports are properly sorted"
          fi
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run linting (flake8)
        run: |
          echo "üîç Running flake8 linting..."
          flake8 app/ --count --statistics
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run type checking (mypy)
        run: |
          echo "üîç Running mypy type checking..."
          mypy app/ --ignore-missing-imports
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.WORKING_DIR }}/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKING_DIR }}

      - name: Install security tools
        run: pip install safety bandit
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run safety (dependency vulnerability scan)
        run: |
          echo "üîç Running safety vulnerability scan..."
          safety check
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run bandit (security linting)
        run: |
          echo "üîç Running bandit security scanner..."
          bandit -r app/ -f json -o bandit-report.json || true
          echo "‚úÖ Bandit security scan completed"
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

  # Backend testing
  test:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.WORKING_DIR }}/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run tests
        run: |
          echo "üß™ Running Python tests..."
          # Skip tests if no test files exist (much faster)
          if find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
            pytest -v --tb=short --cov=app --cov-report=term-missing
          else
            echo "‚úÖ No Python test files found - skipping tests"
          fi
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

  # Build and validate
  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.WORKING_DIR }}/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKING_DIR }}

      - name: Validate Python app can start
        run: |
          echo "üîç Validating Python app can start..."
          python -c "import app.main; print('‚úÖ App imports successfully')"
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

      - name: Create Python package
        run: |
          echo "üì¶ Creating Python package..."
          pip install build
          python -m build --wheel
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-backend-build
          path: ${{ env.WORKING_DIR }}/dist/
          retention-days: 30

  # Integration test (optional, can be expanded)
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.WORKING_DIR }}/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run integration tests
        run: |
          echo "üîó Running Python integration tests..."
          # Add your integration tests here
          # Example: python -m pytest tests/integration/ -v
          python -c "import app.main; print('‚úÖ Python app integration test passed')"
          echo "‚úÖ Integration tests completed"
        shell: bash
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
